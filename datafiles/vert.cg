
#define ASL_FASTEST 4353 // 0x1101
#define ASL_NICEST 4354 // 0x1102
// For colorMaterial
#define ASL_AMBIENT                        4608 // 0x1200
#define ASL_DIFFUSE                        4609 // 0x1201
#define ASL_SPECULAR                       4610 // 0x1202
#define ASL_EMISSION                       5632 // 0x1600
#define ASL_AMBIENT_AND_DIFFUSE            5634 // 0x1602

#if !defined(LIGHTING_ENABLED)
	#define LIGHTING_ENABLED -1
#endif

#if !defined(FOG_ENABLED)
	#define FOG_ENABLED -1
#endif

#if !defined(POSITION_ENABLED)
	#define POSITION_ENABLED -1
#endif

#if !defined(NORMAL_ENABLED)
	#define NORMAL_ENABLED -1
#endif

#if !defined(COLOR_ENABLED)
	#define COLOR_ENABLED -1
#endif

#if !defined(COLOR_BGRA_ENABLED)
	#define COLOR_BGRA_ENABLED -1
#endif

#if !defined(NORMALIZE_ENABLED)
	#define NORMALIZE_ENABLED -1
#endif

#if !defined(RESCALE_NORMAL_ENABLED)
	#define RESCALE_NORMAL_ENABLED -1
#endif

#if !defined(FOG_HINT)
	#define FOG_HINT -1
#endif

#if !defined(TEXCOORD0_ENABLED)
	#define TEXCOORD0_ENABLED -1
#endif

#if !defined(TEXCOORD1_ENABLED)
	#define TEXCOORD1_ENABLED -1
#endif

#if !defined(TEXCOORD2_ENABLED)
	#define TEXCOORD2_ENABLED -1
#endif

#if !defined(TEXTURE0_ENABLED)
	#define TEXTURE0_ENABLED -1
#endif

#if !defined(TEXTURE1_ENABLED)
	#define TEXTURE1_ENABLED -1
#endif

#if !defined(TEXTURE2_ENABLED)
	#define TEXTURE2_ENABLED -1
#endif

#if !defined(CLIP_PLANE0_ENABLED)
	#define CLIP_PLANE0_ENABLED -1
#endif

#if !defined(CLIP_PLANE1_ENABLED)
	#define CLIP_PLANE1_ENABLED -1
#endif

#if !defined(CLIP_PLANE2_ENABLED)
	#define CLIP_PLANE2_ENABLED -1
#endif

#if !defined(CLIP_PLANE3_ENABLED)
	#define CLIP_PLANE3_ENABLED -1
#endif

#if !defined(CLIP_PLANE4_ENABLED)
	#define CLIP_PLANE4_ENABLED -1
#endif

#if !defined(CLIP_PLANE5_ENABLED)
	#define CLIP_PLANE5_ENABLED -1
#endif

#if !defined(NON_DIRECTIONAL_LIGHT_ENABLED)
	#define NON_DIRECTIONAL_LIGHT_ENABLED -1
#endif

#if !defined(LIGHT_MODEL_LOCAL_VIEWER_ENABLED)
	#define LIGHT_MODEL_LOCAL_VIEWER_ENABLED -1
#endif

// Uniforms
uniform bool u_positionEnabled;
uniform bool u_normalEnabled;
uniform bool u_colorEnabled;
uniform bool u_colorBgraEnabled;
uniform float4x4 u_modelViewMatrix;
uniform float4x4 u_modelViewProjectionMatrix;
uniform float3x3 u_transposeAdjointModelViewMatrix;
uniform bool u_lightingEnabled;
uniform bool u_normalizeEnabled;
uniform bool u_rescaleNormalEnabled;
uniform float u_rescaleNormalFactor;
uniform bool u_fogEnabled;
uniform int u_fogHint;
uniform int u_lightingHint;
uniform int u_colorMaterial;

// Shader constants
static int c_zero = 0;
static int c_one = 1;
static float c_zerof = 0.0;
static float c_onef = 1.0;

// Shader variables
float3 normal;
float4 vertexPositionInEye;

// Functions
float4 calcLighting(float4 inputColor, float4 clr);
float calcFogFactor(float distanceToEye);
void calcClipPlanes();
float4 calcTexture0Coordinates(float4 pos, float3 normal, float4 texcoord);
float4 calcTexture1Coordinates(float4 pos, float3 normal, float4 texcoord);
float4 calcTexture2Coordinates(float4 pos, float3 normal, float4 texcoord);
float4 calcTexture3Coordinates(float4 pos, float3 normal, float4 texcoord);

void main(
	float4 a_position,
	float4 a_color,
	float3 a_normal,
	float4 a_texCoord0,
	float4 a_texCoord1,
	float4 a_texCoord2,
	float4 a_texCoord3,
	float4 out v_frontColor : COLOR0,
#if FOG_ENABLED == 1 || FOG_ENABLED == -1
	float out v_fogFactor : FOG,
	float out v_eyeDistance : TEXCOORD0,
#endif
#if TEXTURE0_ENABLED != 0
	float4 out v_texCoord0 : TEXCOORD1,
#endif
#if TEXTURE1_ENABLED != 0
	float4 out v_texCoord1 : TEXCOORD2,
#endif
#if TEXTURE2_ENABLED != 0
	float4 out v_texCoord2 : TEXCOORD3,
#endif
#if TEXTURE3_ENABLED != 0
	float4 out v_texCoord3 : TEXCOORD4,
#endif
	float4 out gl_Position : POSITION
) {
#if POSITION_ENABLED == 1
	gl_Position = mul(a_position, u_modelViewProjectionMatrix);
#elif POSITION_ENABLED == -1
	if (u_positionEnabled) {
		gl_Position = mul(a_position, u_modelViewProjectionMatrix);
	}
#endif
		
#if NORMAL_ENABLED == 1
	normal = mul(a_normal, u_transposeAdjointModelViewMatrix);
	#if RESCALE_NORMAL_ENABLED == 1
		normal = normal * u_rescaleNormalFactor;
	#elif RESCALE_NORMAL_ENABLED == -1
		if (u_rescaleNormalEnabled) {
			normal = normal * u_rescaleNormalFactor;
		}
	#endif
	#if NORMALIZE_ENABLED == 1
		normal = normalize(normal);
	#elif NORMALIZE_ENABLED == -1
		if (u_normalizeEnabled) {
			normal = normalize(normal);
		}
	#endif
#elif NORMAL_ENABLED == 0
	normal = float3(c_zerof, c_zerof, c_onef);
#elif NORMAL_ENABLED == -1
	if (u_normalEnabled) {
		normal = mul(a_normal, u_transposeAdjointModelViewMatrix);
		#if RESCALE_NORMAL_ENABLED == 1
			normal = normal * u_rescaleNormalFactor;
		#elif RESCALE_NORMAL_ENABLED == -1
			if (u_rescaleNormalEnabled) {
				normal = normal * u_rescaleNormalFactor;
			}
		#endif
		#if NORMALIZE_ENABLED == 1
			normal = normalize(normal);
		#elif NORMALIZE_ENABLED == -1
			if (u_normalizeEnabled) {
				normal = normalize(normal);
			}
		#endif
	} else {
		normal = float3(c_zerof, c_zerof, c_onef);
	}
#endif
	
	float4 pos = mul(a_position, u_modelViewMatrix);
	float3 normals = mul(a_normal, u_transposeAdjointModelViewMatrix);
#if TEXTURE0_ENABLED != 0
	v_texCoord0 = calcTexture0Coordinates(pos, normals, a_texCoord0);
#endif
#if TEXTURE1_ENABLED != 0
	v_texCoord1 = calcTexture1Coordinates(pos, normals, a_texCoord1);
#endif
#if TEXTURE2_ENABLED != 0
	v_texCoord2 = calcTexture2Coordinates(pos, normals, a_texCoord2);
#endif
#if TEXTURE3_ENABLED != 0
	v_texCoord3 = calcTexture3Coordinates(pos, normals, a_texCoord3);
#endif
	
	float4 color;
#if COLOR_ENABLED == 1
	color = a_color;
#elif COLOR_ENABLED == 0
	color = float4(c_onef, c_onef, c_onef, c_onef);
#elif COLOR_ENABLED == -1
	color = u_colorEnabled ? a_color : float4(c_onef, c_onef, c_onef, c_onef);
#endif
#if COLOR_BGRA_ENABLED == 1
	color.rgba = color.bgra;
#elif COLOR_BGRA_ENABLED == 0
#elif COLOR_BGRA_ENABLED == -1
	color.rgba = u_colorBgraEnabled ? color.bgra : color.rgba;
#endif
	
#if FOG_ENABLED == 1 || (LIGHTING_ENABLED == 1 && (NON_DIRECTIONAL_LIGHT_ENABLED != 0 || LIGHT_MODEL_LOCAL_VIEWER_ENABLED != 0)) || CLIP_PLANE0_ENABLED != 0 || CLIP_PLANE1_ENABLED != 0 || CLIP_PLANE2_ENABLED != 0 || CLIP_PLANE3_ENABLED !=0 || CLIP_PLANE4_ENABLED != 0 || CLIP_PLANE5_ENABLED != 0
	vertexPositionInEye = mul(a_position, u_modelViewMatrix);
#elif FOG_ENABLED == -1 && LIGHTING_ENABLED == -1
	if (u_fogEnabled) {
		vertexPositionInEye = mul(a_position, u_modelViewMatrix);
	} else if (u_lightingEnabled) {
		#if NON_DIRECTIONAL_LIGHT_ENABLED == 1 || NON_DIRECTIONAL_LIGHT_ENABLED == -1 || LIGHT_MODEL_LOCAL_VIEWER_ENABLED == 1 || LIGHT_MODEL_LOCAL_VIEWER_ENABLED == -1
		vertexPositionInEye = mul(a_position, u_modelViewMatrix);
		#else
		vertexPositionInEye = float4(0, 0, 0, 1);
		#endif
	}
	else
	{
		vertexPositionInEye = float4(0, 0, 0, 1);
	}
#elif FOG_ENABLED == -1
	if (u_fogEnabled) {
		vertexPositionInEye = mul(a_position, u_modelViewMatrix);
	}
	else
	{
		vertexPositionInEye = float4(0, 0, 0, 1);
	}
#elif LIGHTING_ENABLED == -1
	if (u_lightingEnabled) {
		#if NON_DIRECTIONAL_LIGHT_ENABLED == 1 || NON_DIRECTIONAL_LIGHT_ENABLED == -1 || LIGHT_MODEL_LOCAL_VIEWER_ENABLED == 1 || LIGHT_MODEL_LOCAL_VIEWER_ENABLED == -1
		vertexPositionInEye = mul(a_position, u_modelViewMatrix);
		#else
		vertexPositionInEye = float4(0, 0, 0, 1);
		#endif
	}
	else
	{
		vertexPositionInEye = float4(0, 0, 0, 1);
	}
#else
	vertexPositionInEye = float4(0, 0, 0, 1);
#endif

#if LIGHTING_ENABLED == 1
	v_frontColor = calcLighting(color, v_frontColor);
#elif LIGHTING_ENABLED == 0
	v_frontColor = color;
#else
	if (u_lightingEnabled) {
		v_frontColor = calcLighting(color, v_frontColor);
	} else {
		v_frontColor = color;
	}
#endif
	
#if FOG_ENABLED == 1 || FOG_ENABLED == -1
	#if FOG_ENABLED == -1
	if (u_fogEnabled) {
	#endif
		
	#if FOG_HINT == ASL_FASTEST
		v_fogFactor = calcFogFactor(-vertexPositionInEye.z);
	#elif FOG_HINT == ASL_NICEST
		v_eyeDistance = -vertexPositionInEye.z;
	#elif FOG_HINT == -1
		if (u_fogHint == ASL_FASTEST) {
			v_fogFactor = calcFogFactor(-vertexPositionInEye.z);
		} else {
			v_eyeDistance = -vertexPositionInEye.z;
		}
	#endif
		
	#if FOG_ENABLED == -1
	}
	#endif
#endif
	
#if CLIP_PLANE0_ENABLED != 0 || CLIP_PLANE1_ENABLED != 0 || CLIP_PLANE2_ENABLED != 0 || CLIP_PLANE3_ENABLED !=0 || CLIP_PLANE4_ENABLED != 0 || CLIP_PLANE5_ENABLED != 0
	calcClipPlanes();
#endif
}

#if !defined(TEXTURE0_MATRIX_ENABLED)
#define TEXTURE0_MATRIX_ENABLED 0
#endif
#if !defined(TEXTURE1_MATRIX_ENABLED)
#define TEXTURE1_MATRIX_ENABLED 1
#endif
#if !defined(TEXTURE2_MATRIX_ENABLED)
#define TEXTURE2_MATRIX_ENABLED 1
#endif
#if !defined(TEXTURE3_MATRIX_ENABLED)
#define TEXTURE3_MATRIX_ENABLED 1
#endif
#if !defined(TEXTURE4_MATRIX_ENABLED)
#define TEXTURE4_MATRIX_ENABLED 1
#endif
#if !defined(TEXTURE5_MATRIX_ENABLED)
#define TEXTURE5_MATRIX_ENABLED 1
#endif
#if !defined(TEXTURE6_MATRIX_ENABLED)
#define TEXTURE6_MATRIX_ENABLED 1
#endif
#if !defined(TEXTURE7_MATRIX_ENABLED)
#define TEXTURE7_MATRIX_ENABLED 1
#endif


// Uniforms
uniform bool u_texture0Enabled;
uniform bool u_texture1Enabled;
uniform bool u_texture2Enabled;
uniform bool u_texture3Enabled;

#if !defined(ASL_EYE_LINEAR)
#define ASL_EYE_LINEAR                     9216 // 0x2400
#define ASL_OBJECT_LINEAR                  9217 // 0x2401
#define ASL_SPHERE_MAP                     9218 // 0x2402
#define ASL_NORMAL_MAP_ARB                 34065 // 0x8511
#define ASL_REFLECTION_MAP_ARB             34066 // 0x8512
#endif

#if TEXTURE0_ENABLED != 0

#if !defined(TEXTURE0_MATRIX_ENABLED)
#define TEXTURE0_MATRIX_ENABLED -1
#endif

#if !defined(TEXTURE0_GEN_MODE_S)
#define TEXTURE0_GEN_MODE_S -1
#endif

#if !defined(TEXTURE0_GEN_MODE_T)
#define TEXTURE0_GEN_MODE_T -1
#endif

#if !defined(TEXTURE0_GEN_MODE_R)
#define TEXTURE0_GEN_MODE_R -1
#endif

// Uniforms
uniform bool u_texture0MatrixEnabled;
uniform float4x4 u_texture0Matrix;

float4 calcTexture0Coordinates(float4 pos, float3 normal, float4 a_texCoord0)
{
#if TEXCOORD0_ENABLED
	float4 inTexCoord = a_texCoord0;
#else
	float4 inTexCoord = float4(c_zero, c_zero, c_zero, c_zero);
#endif
	
#if (TEXCOORD0_GEN_S_ENABLED > 0) || (TEXCOORD0_GEN_T_ENABLED > 0) || (TEXCOORD0_GEN_R_ENABLED > 0)
#if TEXTURE0_GEN_MODE_S == ASL_EYE_LINEAR
	inTexCoord = pos;
#elif TEXTURE0_GEN_MODE_S == ASL_NORMAL_MAP_ARB
	inTexCoord = float4(normal.x, normal.y, normal.z, 1.0);
#elif TEXTURE0_GEN_MODE_S == ASL_REFLECTION_MAP_ARB
	float3 reflection = normalize(pos.xyz - dot(pos.xyz, normal) * 2.0 * normal);
	inTexCoord = float4(reflection.x, reflection.y, reflection.z, 1.0);
#endif
#endif

#if TEXTURE0_MATRIX_ENABLED == 1 || TEXTURE0_MATRIX_ENABLED == -1
#if TEXTURE0_MATRIX_ENABLED == -1
	if (u_texture0MatrixEnabled) {
#endif
		inTexCoord = mul(inTexCoord, u_texture0Matrix);
#if TEXTURE0_MATRIX_ENABLED == -1
	}
#endif
#endif
#if (TEXCOORD0_GEN_S_ENABLED > 0) || (TEXCOORD0_GEN_T_ENABLED > 0) || (TEXCOORD0_GEN_R_ENABLED > 0)
	inTexCoord.x /= clamp(inTexCoord.w, 0.0001, 10000.0);
	inTexCoord.y /= clamp(inTexCoord.w, 0.0001, 10000.0);
	inTexCoord.z = 0.0;
	inTexCoord.w = 0.0;
#endif
	return inTexCoord;
}

#endif


#if !defined(ASL_EYE_LINEAR)
#define ASL_EYE_LINEAR                     9216 // 0x2400
#define ASL_OBJECT_LINEAR                  9217 // 0x2401
#define ASL_SPHERE_MAP                     9218 // 0x2402
#define ASL_NORMAL_MAP_ARB                 34065 // 0x8511
#define ASL_REFLECTION_MAP_ARB             34066 // 0x8512
#endif

#if TEXTURE1_ENABLED != 0

#if !defined(TEXTURE1_MATRIX_ENABLED)
#define TEXTURE1_MATRIX_ENABLED -1
#endif

#if !defined(TEXTURE1_GEN_MODE_S)
#define TEXTURE1_GEN_MODE_S -1
#endif

#if !defined(TEXTURE1_GEN_MODE_T)
#define TEXTURE1_GEN_MODE_T -1
#endif

#if !defined(TEXTURE1_GEN_MODE_R)
#define TEXTURE1_GEN_MODE_R -1
#endif

// Uniforms
uniform bool u_texture1MatrixEnabled;
uniform float4x4 u_texture1Matrix;

float4 calcTexture1Coordinates(float4 pos, float3 normal, float4 a_texCoord1)
{
#if TEXCOORD1_ENABLED
	float4 inTexCoord = a_texCoord1;
#else
	float4 inTexCoord = float4(c_zero, c_zero, c_zero, c_zero);
#endif
	
#if (TEXCOORD1_GEN_S_ENABLED > 0) || (TEXCOORD1_GEN_T_ENABLED > 0) || (TEXCOORD1_GEN_R_ENABLED > 0)
#if TEXTURE1_GEN_MODE_S == ASL_EYE_LINEAR
	inTexCoord = pos;
#elif TEXTURE1_GEN_MODE_S == ASL_NORMAL_MAP_ARB
	inTexCoord = float4(normal.x, normal.y, normal.z, 1.0);
#elif TEXTURE1_GEN_MODE_S == ASL_REFLECTION_MAP_ARB
	float3 reflect = normalize(pos.xyz - dot(pos.xyz, normal) * 2.0 * normal);
	inTexCoord = float4(reflect.x, reflect.y, reflect.z, 1.0);
#endif
#endif

#if TEXTURE1_MATRIX_ENABLED == 1 || TEXTURE1_MATRIX_ENABLED == -1
#if TEXTURE1_MATRIX_ENABLED == -1
	if (u_texture1MatrixEnabled) {
#endif
		inTexCoord = mul(inTexCoord, u_texture1Matrix);
#if TEXTURE1_MATRIX_ENABLED == -1
	}
#endif
#endif
#if (TEXCOORD1_GEN_S_ENABLED > 0) || (TEXCOORD1_GEN_T_ENABLED > 0) || (TEXCOORD1_GEN_R_ENABLED > 0)
	inTexCoord.x /= clamp(inTexCoord.w, 0.0001, 10000.0);
	inTexCoord.y /= clamp(inTexCoord.w, 0.0001, 10000.0);
	inTexCoord.z = 0.0;
	inTexCoord.w = 0.0;
#endif
	return inTexCoord;
}

#endif


#if !defined(ASL_EYE_LINEAR)
#define ASL_EYE_LINEAR                     9216 // 0x2400
#define ASL_OBJECT_LINEAR                  9217 // 0x2401
#define ASL_SPHERE_MAP                     9218 // 0x2402
#define ASL_NORMAL_MAP_ARB                 34065 // 0x8511
#define ASL_REFLECTION_MAP_ARB             34066 // 0x8512
#endif

#if TEXTURE2_ENABLED != 0

#if !defined(TEXTURE2_MATRIX_ENABLED)
#define TEXTURE2_MATRIX_ENABLED -1
#endif

#if !defined(TEXTURE2_GEN_MODE_S)
#define TEXTURE2_GEN_MODE_S -1
#endif

#if !defined(TEXTURE2_GEN_MODE_T)
#define TEXTURE2_GEN_MODE_T -1
#endif

#if !defined(TEXTURE2_GEN_MODE_R)
#define TEXTURE2_GEN_MODE_R -1
#endif

// Uniforms
uniform bool u_texture2MatrixEnabled;
uniform float4x4 u_texture2Matrix;

float4 calcTexture2Coordinates(float4 pos, float3 normal, float4 a_texCoord2)
{
#if TEXCOORD2_ENABLED
	float4 inTexCoord = a_texCoord2;
#else
	float4 inTexCoord = float4(c_zero, c_zero, c_zero, c_zero);
#endif
	
#if (TEXCOORD2_GEN_S_ENABLED > 0) || (TEXCOORD2_GEN_T_ENABLED > 0) || (TEXCOORD2_GEN_R_ENABLED > 0)
#if TEXTURE2_GEN_MODE_S == ASL_EYE_LINEAR
	inTexCoord = pos;
#elif TEXTURE2_GEN_MODE_S == ASL_NORMAL_MAP_ARB
	inTexCoord = float4(normal.x, normal.y, normal.z, 1.0);
#elif TEXTURE2_GEN_MODE_S == ASL_REFLECTION_MAP_ARB
	float3 reflect = normalize(pos.xyz - dot(pos.xyz, normal) * 2.0 * normal);
	inTexCoord = float4(reflect.x, reflect.y, reflect.z, 1.0);
#endif
#endif

#if TEXTURE2_MATRIX_ENABLED == 1 || TEXTURE2_MATRIX_ENABLED == -1
#if TEXTURE2_MATRIX_ENABLED == -1
	if (u_texture2MatrixEnabled) {
#endif
		inTexCoord = mul(inTexCoord, u_texture2Matrix);
#if TEXTURE2_MATRIX_ENABLED == -1
	}
#endif
#endif
#if (TEXCOORD2_GEN_S_ENABLED > 0) || (TEXCOORD2_GEN_T_ENABLED > 0) || (TEXCOORD2_GEN_R_ENABLED > 0)
	inTexCoord.x /= clamp(inTexCoord.w, 0.0001, 10000.0);
	inTexCoord.y /= clamp(inTexCoord.w, 0.0001, 10000.0);
	inTexCoord.z = 0.0;
	inTexCoord.w = 0.0;
#endif
	return inTexCoord;
}

#endif


#if !defined(ASL_EYE_LINEAR)
#define ASL_EYE_LINEAR                     9216 // 0x2400
#define ASL_OBJECT_LINEAR                  9217 // 0x2401
#define ASL_SPHERE_MAP                     9218 // 0x2402
#define ASL_NORMAL_MAP_ARB                 34065 // 0x8511
#define ASL_REFLECTION_MAP_ARB             34066 // 0x8512
#endif

#if TEXTURE3_ENABLED != 0

#if !defined(TEXTURE3_MATRIX_ENABLED)
#define TEXTURE3_MATRIX_ENABLED -1
#endif

#if !defined(TEXTURE3_GEN_MODE_S)
#define TEXTURE3_GEN_MODE_S -1
#endif

#if !defined(TEXTURE3_GEN_MODE_T)
#define TEXTURE3_GEN_MODE_T -1
#endif

#if !defined(TEXTURE3_GEN_MODE_R)
#define TEXTURE3_GEN_MODE_R -1
#endif

// Uniforms
uniform bool u_texture3MatrixEnabled;
uniform float4x4 u_texture3Matrix;

float4 calcTexture3Coordinates(float4 pos, float3 normal, float4 a_texCoord3)
{
#if TEXCOORD3_ENABLED
	float4 inTexCoord = a_texCoord3;
#else
	float4 inTexCoord = float4(c_zero, c_zero, c_zero, c_zero);
#endif
	
#if (TEXCOORD3_GEN_S_ENABLED > 0) || (TEXCOORD3_GEN_T_ENABLED > 0) || (TEXCOORD3_GEN_R_ENABLED > 0)
#if TEXTURE3_GEN_MODE_S == ASL_EYE_LINEAR
	inTexCoord = pos;
#elif TEXTURE3_GEN_MODE_S == ASL_NORMAL_MAP_ARB
	inTexCoord = float4(normal.x, normal.y, normal.z, 1.0);
#elif TEXTURE3_GEN_MODE_S == ASL_REFLECTION_MAP_ARB
	float3 reflect = normalize(pos.xyz - dot(pos.xyz, normal) * 2.0 * normal);
	inTexCoord = float4(reflect.x, reflect.y, reflect.z, 1.0);
#endif
#endif

#if TEXTURE3_MATRIX_ENABLED == 1 || TEXTURE3_MATRIX_ENABLED == -1
#if TEXTURE3_MATRIX_ENABLED == -1
	if (u_texture3MatrixEnabled) {
#endif
		inTexCoord = mul(inTexCoord, u_texture3Matrix);
#if TEXTURE3_MATRIX_ENABLED == -1
	}
#endif
#endif
#if (TEXCOORD3_GEN_S_ENABLED > 0) || (TEXCOORD3_GEN_T_ENABLED > 0) || (TEXCOORD3_GEN_R_ENABLED > 0)
	inTexCoord.x /= clamp(inTexCoord.w, 0.0001, 10000.0);
	inTexCoord.y /= clamp(inTexCoord.w, 0.0001, 10000.0);
	inTexCoord.z = 0.0;
	inTexCoord.w = 0.0;
#endif
	return inTexCoord;
}

#endif

#if !defined(LIGHT_MODEL_LOCAL_VIEWER_ENABLED)
#define LIGHT_MODEL_LOCAL_VIEWER_ENABLED 0
#endif
#if !defined(LIGHT_MODEL_TWO_SIDE_ENABLED)
#define LIGHT_MODEL_TWO_SIDE_ENABLED 0
#endif
#if !defined(LIGHT0_ENABLED)
#define LIGHT0_ENABLED 0
#endif
#if !defined(LIGHT1_ENABLED)
#define LIGHT1_ENABLED 0
#endif
#if !defined(LIGHT2_ENABLED)
#define LIGHT2_ENABLED 0
#endif


#if !defined(LIGHT0_ENABLED)
	#define LIGHT0_ENABLED -1
#endif

#if !defined(LIGHT1_ENABLED)
	#define LIGHT1_ENABLED -1
#endif

#if !defined(LIGHT2_ENABLED)
	#define LIGHT2_ENABLED -1
#endif

#if !defined(LIGHTING_HINT)
	#define LIGHTING_HINT -1
#endif

#if !defined(LIGHT_MODEL_TWO_SIDE_ENABLED)
	#define LIGHT_MODEL_TWO_SIDE_ENABLED -1
#endif

// Structs
struct Light {
	// all lights
	float4 position; // if directional light, this must be normalized (so that we dont have to normalize it here)
	float4 ambient;
	float4 diffuse;
	float4 specular;
	
	// point light & spotlight
	float constantAttenuation;
	float linearAttenuation;
	float quadraticAttenuation;
	
	// spotlight
	float3 spotDirection;
	float spotExponent;
	float spotCutoffAngleCos;
};

struct Material {
	float4 ambient;
	float4 diffuse;
	float4 specular;
	float4 emission;
	float shininess;
};

// Uniforms
uniform bool u_light0Enabled;
uniform bool u_light1Enabled;
uniform bool u_light2Enabled;
uniform Light u_light0;
uniform Light u_light1;
uniform Light u_light2;
uniform Material u_material;
uniform bool u_lightModelLocalViewerEnabled;
uniform bool u_lightModelTwoSideEnabled;
uniform float4 u_globalAmbientColor;
uniform int u_lightingAccuracy;

// Functions
void calcLightingVaryingsForFragmentShader();
float4 calcPerVertexLighting(float4 inputColor);

float4 calcLighting(float4 inputColor, float4 v_frontColor)
{
#if LIGHT_MODEL_TWO_SIDE_ENABLED == 1 || LIGHT_MODEL_TWO_SIDE_ENABLED == -1
	#if LIGHT_MODEL_TWO_SIDE_ENABLED == -1
	if (u_lightModelTwoSideEnabled) {
	#endif
		#if LIGHTING_HINT == ASL_FASTEST
		v_frontColor = calcPerVertexLighting(inputColor);
		normal = -normal;
		v_backColor = calcPerVertexLighting(inputColor);
		#elif LIGHTING_HINT == ASL_NICEST
		calcLightingVaryingsForFragmentShader();
		#elif LIGHTING_HINT == -1
		if (u_lightingAccuracy == ASL_FASTEST) {
			v_frontColor = calcPerVertexLighting(inputColor);
			normal = -normal;
			v_backColor = calcPerVertexLighting(inputColor);
		} else {
			calcLightingVaryingsForFragmentShader();
		}
		#endif
	#if LIGHT_MODEL_TWO_SIDE_ENABLED == -1
	} else {
		#if LIGHTING_HINT == ASL_FASTEST
		v_frontColor = calcPerVertexLighting(inputColor);
		#elif LIGHTING_HINT == ASL_NICEST
		calcLightingVaryingsForFragmentShader();
		#elif LIGHTING_HINT == -1
		if (u_lightingAccuracy == ASL_FASTEST) {
			v_frontColor = calcPerVertexLighting(inputColor);
		} else {
			calcLightingVaryingsForFragmentShader();
		}
		#endif
	}
	#endif
#else 
	#if LIGHTING_HINT == ASL_FASTEST
		v_frontColor = calcPerVertexLighting(inputColor);
	#elif LIGHTING_HINT == ASL_NICEST
		calcLightingVaryingsForFragmentShader();
	#elif LIGHTING_HINT == -1
		if (u_lightingAccuracy == ASL_FASTEST) {
			v_frontColor = calcPerVertexLighting(inputColor);
		} else {
			calcLightingVaryingsForFragmentShader();
		}
	#endif
#endif
	return v_frontColor;
}

#define ASL_LINEAR 9729 // 0x2601
#define ASL_EXP 2048 // 0x0800
#define ASL_EXP2 2049 // 0x0801

#if !defined(FOG_MODE)
	#define FOG_MODE -1
#endif

// Uniforms
uniform int u_fogMode;
uniform float u_fogDensity;
uniform float u_fogStart;
uniform float u_fogEnd;

// Functions
float calcFogLinear(float distanceToEye);
float calcFogExp(float distanceToEye);
float calcFogExp2(float distanceToEye);


float calcFogFactor(float distanceToEye)
{
	float fogFactor;
#if FOG_MODE == ASL_LINEAR
	fogFactor = calcFogLinear(distanceToEye);
#elif FOG_MODE == ASL_EXP
	fogFactor = calcFogExp(distanceToEye);
#elif FOG_MODE == ASL_EXP2
	fogFactor = calcFogExp2(distanceToEye);
#elif FOG_MODE == -1
	if (u_fogMode == ASL_LINEAR) {
		fogFactor = calcFogLinear(distanceToEye);
	} else if (u_fogMode == ASL_EXP) {
		fogFactor = calcFogExp(distanceToEye);
	} else {
		fogFactor = calcFogExp2(distanceToEye);
	}
#endif
	
	return fogFactor;
}

float calcFogLinear(float distanceToEye)
{
	float f = (u_fogEnd + distanceToEye) / (u_fogEnd - u_fogStart);
	return clamp(f, c_zerof, c_onef);
}

float calcFogExp(float distanceToEye)
{
	float f = exp(-(distanceToEye * u_fogDensity));
	return clamp(f, c_zerof, c_onef);
}

float calcFogExp2(float distanceToEye)
{
	float f = distanceToEye * u_fogDensity;
	f = exp(-(f*f));
	return clamp(f, c_zerof, c_onef);
}

// Functions
float4 calcDirectionalLight(Light light);
float4 calcDirectionalLightWithLocalViewer(Light light);
float4 calcPointLight(Light light);
float4 calcPointLightWithLocalViewer(Light light);
float4 calcSpotLight(Light light);
float4 calcSpotLightWithLocalViewer(Light light);
float calcBasicAttenuationFactor(Light light, float3 lightVector);
float calcSpotFactor(Light light, float3 lightVector);
float4 calcLight(Light light);


float4 calcPerVertexLighting(float4 inputColor)
{
	// TODO: Test if faster with vec3 because alpha is just u_material.diffuse.a
	float4 color;
	float4 ambient;
	if (u_colorMaterial == ASL_AMBIENT)
	{
		ambient = inputColor;
	}
	else
	{
		ambient = u_material.ambient;
	}
	color = ambient * u_globalAmbientColor;
	color += u_material.emission;
	
	#if LIGHT0_ENABLED == 1
	color += calcLight(u_light0);
	#elif LIGHT0_ENABLED == -1
	if (u_light0Enabled) {
		color += calcLight(u_light0);
	}
	#endif
	
	#if LIGHT1_ENABLED == 1
	color += calcLight(u_light1);
	#elif LIGHT1_ENABLED == -1
	if (u_light1Enabled) {
		color += calcLight(u_light1);
	}
	#endif
	
	#if LIGHT2_ENABLED == 1
	color += calcLight(u_light2);
	#elif LIGHT2_ENABLED == -1
	if (u_light2Enabled) {
		color += calcLight(u_light2);
	}
	#endif	
	
	color.a = u_material.diffuse.a;
	
	return clamp(color, c_zerof, c_onef);
}

float4 calcLight(Light light) 
{
	float4 color;
#if LIGHT_MODEL_LOCAL_VIEWER_ENABLED == 1
	#if NON_DIRECTIONAL_LIGHT_ENABLED == 1 || NON_DIRECTIONAL_LIGHT_ENABLED == -1
	if (light.position.w != c_zerof) {
		if (light.spotCutoffAngleCos > -c_onef) {
			color = calcSpotLightWithLocalViewer(light);
		} else {
			color = calcPointLightWithLocalViewer(light);
		}
	} else {
		color = calcDirectionalLightWithLocalViewer(light);
	}
	#else
	color = calcDirectionalLightWithLocalViewer(light);
	#endif
#elif LIGHT_MODEL_LOCAL_VIEWER_ENABLED == 0
	#if NON_DIRECTIONAL_LIGHT_ENABLED == 1 || NON_DIRECTIONAL_LIGHT_ENABLED == -1
	if (light.position.w != c_zerof) {
		if (light.spotCutoffAngleCos > -c_onef) {
			color = calcSpotLight(light);
		} else {
			color = calcPointLight(light);
		}
	} else {
		color = calcDirectionalLight(light);
	}
	#else
	color = calcDirectionalLight(light);
	#endif
#else 
	if (u_lightModelLocalViewerEnabled) {
		#if NON_DIRECTIONAL_LIGHT_ENABLED == 1 || NON_DIRECTIONAL_LIGHT_ENABLED == -1
		if (light.position.w != c_zerof) {
			if (light.spotCutoffAngleCos > -c_onef) {
				color = calcSpotLightWithLocalViewer(light);
			} else {
				color = calcPointLightWithLocalViewer(light);
			}
		} else {
			color = calcDirectionalLightWithLocalViewer(light);
		}
		#else
		color = calcDirectionalLightWithLocalViewer(light);
		#endif
	} else {
		#if NON_DIRECTIONAL_LIGHT_ENABLED == 1 || NON_DIRECTIONAL_LIGHT_ENABLED == -1
		if (light.position.w != c_zerof) {
			if (light.spotCutoffAngleCos > -c_onef) {
				color = calcSpotLight(light);
			} else {
				color = calcPointLight(light);
			}
		} else {
			color = calcDirectionalLight(light);
		}
		#else
		color = calcDirectionalLight(light);
		#endif
	}
#endif
	
	return color;
}

float calcBasicAttenuationFactor(Light light, float3 lightVector) 
{
	float3 attenuationDistance;
	attenuationDistance.x = c_onef;
	attenuationDistance.z = dot(lightVector, lightVector);
	attenuationDistance.y = sqrt(attenuationDistance.z);
	return c_onef / dot(attenuationDistance, float3(light.constantAttenuation, light.linearAttenuation, light.quadraticAttenuation));
}

float calcSpotFactor(Light light, float3 lightVector)
{
	float spotFactor = dot(normalize(-lightVector), normalize(light.spotDirection));
	if (spotFactor >= light.spotCutoffAngleCos) {
		return pow(spotFactor, light.spotExponent);
	} else {
		return c_zerof;
	}
}

float4 calcDirectionalLight(Light light)
{
	float3 lightVector = light.position.xyz;
	float3 eyeVector = float3(c_zerof, c_zerof, c_onef);
	
	float3 halfVector = normalize(eyeVector + lightVector); // TODO: This could be precomputed
	float cosL = max(c_zerof, dot(normal, lightVector));
	float cosH = dot(normal, halfVector);
	
	float4 color = (light.ambient * u_material.ambient);
	color += (light.diffuse * u_material.diffuse) * cosL;
	if (cosH > c_zerof) {
		color += (u_material.specular * light.specular) * pow(cosH, u_material.shininess);
	}
	
	return color;
}

float4 calcDirectionalLightWithLocalViewer(Light light)
{
	float3 lightVector = light.position.xyz;
	float3 eyeVector = normalize(-vertexPositionInEye.xyz);
	
	float3 halfVector = normalize(eyeVector + lightVector);
	float cosL = max(c_zerof, dot(normal, lightVector));
	float cosH = dot(normal, halfVector);
	
	float4 color = (light.ambient * u_material.ambient);
	color += (light.diffuse * u_material.diffuse) * cosL;
	if (cosH > c_zerof) {
		color += (u_material.specular * light.specular) * pow(cosH, u_material.shininess);
	}
	
	return color;
}

float4 calcPointLight(Light light)
{
	float3 lightVector = light.position.xyz - vertexPositionInEye.xyz;
	
	// TODO: if clause here because of heavy computation?
	float attenuationFactor = calcBasicAttenuationFactor(light, lightVector);
	
	lightVector = normalize(lightVector);
	
	float3 eyeVector = float3(c_zerof, c_zerof, c_onef);
	
	float3 halfVector = normalize(eyeVector + lightVector);
	float cosL = max(c_zerof, dot(normal, lightVector));
	float cosH = dot(normal, halfVector);
	
	float4 color = (light.ambient * u_material.ambient);
	color += (light.diffuse * u_material.diffuse) * cosL;
	if (cosH > c_zerof) {
		color += (u_material.specular * light.specular) * pow(cosH, u_material.shininess);
	}
	
	color *= attenuationFactor;
	
	return color;
}


float4 calcPointLightWithLocalViewer(Light light)
{
	float3 lightVector = light.position.xyz - vertexPositionInEye.xyz;
	
	// TODO: if clause here because of heavy computation?
	float attenuationFactor = calcBasicAttenuationFactor(light, lightVector);
	
	lightVector = normalize(lightVector);
	
	float3 eyeVector = normalize(-vertexPositionInEye.xyz);
	
	float3 halfVector = normalize(eyeVector + lightVector);
	float cosL = max(c_zerof, dot(normal, lightVector));
	float cosH = dot(normal, halfVector);
	
	float4 color = (light.ambient * u_material.ambient);
	color += (light.diffuse * u_material.diffuse) * cosL;
	if (cosH > c_zerof) {
		color += (u_material.specular * light.specular) * pow(cosH, u_material.shininess);
	}
	
	color *= attenuationFactor;
	
	return color;
}

float4 calcSpotLight(Light light)
{
	float3 lightVector = light.position.xyz - vertexPositionInEye.xyz;
	
	// TODO: if clause here because of heavy computation?
	float attenuationFactor = calcBasicAttenuationFactor(light, lightVector);
	attenuationFactor *= calcSpotFactor(light, lightVector);
	
	lightVector = normalize(lightVector);
	
	float3 eyeVector = float3(c_zerof, c_zerof, c_onef);
	
	float3 halfVector = normalize(eyeVector + lightVector);
	float cosL = max(c_zerof, dot(normal, lightVector));
	float cosH = dot(normal, halfVector);
	
	float4 color = (light.ambient * u_material.ambient);
	color += (light.diffuse * u_material.diffuse) * cosL;
	if (cosH > c_zerof) {
		color += (u_material.specular * light.specular) * pow(cosH, u_material.shininess);
	}
	
	color *= attenuationFactor;
	
	return color;
}

float4 calcSpotLightWithLocalViewer(Light light)
{
	float3 lightVector = light.position.xyz - vertexPositionInEye.xyz;
	
	// TODO: if clause here because of heavy computation?
	float attenuationFactor = calcBasicAttenuationFactor(light, lightVector);
	attenuationFactor *= calcSpotFactor(light, lightVector);
	
	lightVector = normalize(lightVector);
	
	float3 eyeVector = normalize(-vertexPositionInEye.xyz);
	
	float3 halfVector = normalize(eyeVector + lightVector);
	float cosL = max(c_zerof, dot(normal, lightVector));
	float cosH = dot(normal, halfVector);
	
	float4 color = (light.ambient * u_material.ambient);
	color += (light.diffuse * u_material.diffuse) * cosL;
	if (cosH > c_zerof) {
		color += (u_material.specular * light.specular) * pow(cosH, u_material.shininess);
	}
	
	color *= attenuationFactor;
	
	return color;
}
